<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nanotate.dao.model.UserMapper">
  <resultMap id="BaseResultMap" type="com.nanotate.dao.model.User">
    <id column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="twitter_username" jdbcType="VARCHAR" property="twitter_username" />
    <result column="facebook_username" jdbcType="VARCHAR" property="facebook_username" />
    <result column="firstname" jdbcType="VARCHAR" property="firstname" />
    <result column="lastname" jdbcType="VARCHAR" property="lastname" />
    <result column="facebook_token" jdbcType="VARCHAR" property="facebook_token" />
    <result column="twitter_token" jdbcType="VARCHAR" property="twitter_token" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    username, password, twitter_username, facebook_username, firstname, lastname, facebook_token, 
    twitter_token
  </sql>
  <select id="selectByExample" parameterType="com.nanotate.dao.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from public.user
    where username = #{username,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from public.user
    where username = #{username,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.nanotate.dao.model.UserExample">
    delete from public.user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nanotate.dao.model.User">
    <selectKey keyProperty="username" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into public.user (password, twitter_username, facebook_username, 
      firstname, lastname, facebook_token, 
      twitter_token)
    values (#{password,jdbcType=VARCHAR}, #{twitter_username,jdbcType=VARCHAR}, #{facebook_username,jdbcType=VARCHAR}, 
      #{firstname,jdbcType=VARCHAR}, #{lastname,jdbcType=VARCHAR}, #{facebook_token,jdbcType=VARCHAR}, 
      #{twitter_token,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.nanotate.dao.model.User">
    <selectKey keyProperty="username" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into public.user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="password != null">
        password,
      </if>
      <if test="twitter_username != null">
        twitter_username,
      </if>
      <if test="facebook_username != null">
        facebook_username,
      </if>
      <if test="firstname != null">
        firstname,
      </if>
      <if test="lastname != null">
        lastname,
      </if>
      <if test="facebook_token != null">
        facebook_token,
      </if>
      <if test="twitter_token != null">
        twitter_token,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="twitter_username != null">
        #{twitter_username,jdbcType=VARCHAR},
      </if>
      <if test="facebook_username != null">
        #{facebook_username,jdbcType=VARCHAR},
      </if>
      <if test="firstname != null">
        #{firstname,jdbcType=VARCHAR},
      </if>
      <if test="lastname != null">
        #{lastname,jdbcType=VARCHAR},
      </if>
      <if test="facebook_token != null">
        #{facebook_token,jdbcType=VARCHAR},
      </if>
      <if test="twitter_token != null">
        #{twitter_token,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nanotate.dao.model.UserExample" resultType="java.lang.Integer">
    select count(*) from public.user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update public.user
    <set>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.twitter_username != null">
        twitter_username = #{record.twitter_username,jdbcType=VARCHAR},
      </if>
      <if test="record.facebook_username != null">
        facebook_username = #{record.facebook_username,jdbcType=VARCHAR},
      </if>
      <if test="record.firstname != null">
        firstname = #{record.firstname,jdbcType=VARCHAR},
      </if>
      <if test="record.lastname != null">
        lastname = #{record.lastname,jdbcType=VARCHAR},
      </if>
      <if test="record.facebook_token != null">
        facebook_token = #{record.facebook_token,jdbcType=VARCHAR},
      </if>
      <if test="record.twitter_token != null">
        twitter_token = #{record.twitter_token,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update public.user
    set username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      twitter_username = #{record.twitter_username,jdbcType=VARCHAR},
      facebook_username = #{record.facebook_username,jdbcType=VARCHAR},
      firstname = #{record.firstname,jdbcType=VARCHAR},
      lastname = #{record.lastname,jdbcType=VARCHAR},
      facebook_token = #{record.facebook_token,jdbcType=VARCHAR},
      twitter_token = #{record.twitter_token,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nanotate.dao.model.User">
    update public.user
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="twitter_username != null">
        twitter_username = #{twitter_username,jdbcType=VARCHAR},
      </if>
      <if test="facebook_username != null">
        facebook_username = #{facebook_username,jdbcType=VARCHAR},
      </if>
      <if test="firstname != null">
        firstname = #{firstname,jdbcType=VARCHAR},
      </if>
      <if test="lastname != null">
        lastname = #{lastname,jdbcType=VARCHAR},
      </if>
      <if test="facebook_token != null">
        facebook_token = #{facebook_token,jdbcType=VARCHAR},
      </if>
      <if test="twitter_token != null">
        twitter_token = #{twitter_token,jdbcType=VARCHAR},
      </if>
    </set>
    where username = #{username,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nanotate.dao.model.User">
    update public.user
    set password = #{password,jdbcType=VARCHAR},
      twitter_username = #{twitter_username,jdbcType=VARCHAR},
      facebook_username = #{facebook_username,jdbcType=VARCHAR},
      firstname = #{firstname,jdbcType=VARCHAR},
      lastname = #{lastname,jdbcType=VARCHAR},
      facebook_token = #{facebook_token,jdbcType=VARCHAR},
      twitter_token = #{twitter_token,jdbcType=VARCHAR}
    where username = #{username,jdbcType=VARCHAR}
  </update>
  
 
</mapper>