<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nanotate.model.AnnotationMapper" >
  <resultMap id="BaseResultMap" type="com.nanotate.model.Annotation" >
    <id column="annotation_id" property="annotation_id" jdbcType="VARCHAR" />
    <result column="annotator_schema_version" property="annotator_schema_version" jdbcType="VARCHAR" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="updated" property="updated" jdbcType="TIMESTAMP" />
    <result column="uri" property="uri" jdbcType="VARCHAR" />
    <result column="user" property="user" jdbcType="VARCHAR" />
    <result column="consumer" property="consumer" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.nanotate.model.AnnotationWithBLOBs" extends="BaseResultMap" >
    <result column="text" property="text" jdbcType="LONGVARCHAR" />
    <result column="quote" property="quote" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    annotation_id, annotator_schema_version, created, updated, uri, user, consumer
  </sql>
  <sql id="Blob_Column_List" >
    text, quote
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.nanotate.model.AnnotationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from annotations
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.nanotate.model.AnnotationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from annotations
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from annotations
    where annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from annotations
    where annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.nanotate.model.AnnotationExample" >
    delete from annotations
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nanotate.model.AnnotationWithBLOBs" >
    insert into annotations (annotation_id, annotator_schema_version, 
      created, updated, uri, 
      user, consumer, text, 
      quote)
    values (#{annotation_id,jdbcType=VARCHAR}, #{annotator_schema_version,jdbcType=VARCHAR}, 
      #{created,jdbcType=TIMESTAMP}, #{updated,jdbcType=TIMESTAMP}, #{uri,jdbcType=VARCHAR}, 
      #{user,jdbcType=VARCHAR}, #{consumer,jdbcType=VARCHAR}, #{text,jdbcType=LONGVARCHAR}, 
      #{quote,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.nanotate.model.AnnotationWithBLOBs" >
    insert into annotations
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="annotation_id != null" >
        annotation_id,
      </if>
      <if test="annotator_schema_version != null" >
        annotator_schema_version,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="updated != null" >
        updated,
      </if>
      <if test="uri != null" >
        uri,
      </if>
      <if test="user != null" >
        user,
      </if>
      <if test="consumer != null" >
        consumer,
      </if>
      <if test="text != null" >
        text,
      </if>
      <if test="quote != null" >
        quote,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="annotation_id != null" >
        #{annotation_id,jdbcType=VARCHAR},
      </if>
      <if test="annotator_schema_version != null" >
        #{annotator_schema_version,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null" >
        #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="uri != null" >
        #{uri,jdbcType=VARCHAR},
      </if>
      <if test="user != null" >
        #{user,jdbcType=VARCHAR},
      </if>
      <if test="consumer != null" >
        #{consumer,jdbcType=VARCHAR},
      </if>
      <if test="text != null" >
        #{text,jdbcType=LONGVARCHAR},
      </if>
      <if test="quote != null" >
        #{quote,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nanotate.model.AnnotationExample" resultType="java.lang.Integer" >
    select count(*) from annotations
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update annotations
    <set >
      <if test="record.annotation_id != null" >
        annotation_id = #{record.annotation_id,jdbcType=VARCHAR},
      </if>
      <if test="record.annotator_schema_version != null" >
        annotator_schema_version = #{record.annotator_schema_version,jdbcType=VARCHAR},
      </if>
      <if test="record.created != null" >
        created = #{record.created,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updated != null" >
        updated = #{record.updated,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uri != null" >
        uri = #{record.uri,jdbcType=VARCHAR},
      </if>
      <if test="record.user != null" >
        user = #{record.user,jdbcType=VARCHAR},
      </if>
      <if test="record.consumer != null" >
        consumer = #{record.consumer,jdbcType=VARCHAR},
      </if>
      <if test="record.text != null" >
        text = #{record.text,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.quote != null" >
        quote = #{record.quote,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update annotations
    set annotation_id = #{record.annotation_id,jdbcType=VARCHAR},
      annotator_schema_version = #{record.annotator_schema_version,jdbcType=VARCHAR},
      created = #{record.created,jdbcType=TIMESTAMP},
      updated = #{record.updated,jdbcType=TIMESTAMP},
      uri = #{record.uri,jdbcType=VARCHAR},
      user = #{record.user,jdbcType=VARCHAR},
      consumer = #{record.consumer,jdbcType=VARCHAR},
      text = #{record.text,jdbcType=LONGVARCHAR},
      quote = #{record.quote,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update annotations
    set annotation_id = #{record.annotation_id,jdbcType=VARCHAR},
      annotator_schema_version = #{record.annotator_schema_version,jdbcType=VARCHAR},
      created = #{record.created,jdbcType=TIMESTAMP},
      updated = #{record.updated,jdbcType=TIMESTAMP},
      uri = #{record.uri,jdbcType=VARCHAR},
      user = #{record.user,jdbcType=VARCHAR},
      consumer = #{record.consumer,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nanotate.model.AnnotationWithBLOBs" >
    update annotations
    <set >
      <if test="annotator_schema_version != null" >
        annotator_schema_version = #{annotator_schema_version,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null" >
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="uri != null" >
        uri = #{uri,jdbcType=VARCHAR},
      </if>
      <if test="user != null" >
        user = #{user,jdbcType=VARCHAR},
      </if>
      <if test="consumer != null" >
        consumer = #{consumer,jdbcType=VARCHAR},
      </if>
      <if test="text != null" >
        text = #{text,jdbcType=LONGVARCHAR},
      </if>
      <if test="quote != null" >
        quote = #{quote,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.nanotate.model.AnnotationWithBLOBs" >
    update annotations
    set annotator_schema_version = #{annotator_schema_version,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP},
      uri = #{uri,jdbcType=VARCHAR},
      user = #{user,jdbcType=VARCHAR},
      consumer = #{consumer,jdbcType=VARCHAR},
      text = #{text,jdbcType=LONGVARCHAR},
      quote = #{quote,jdbcType=LONGVARCHAR}
    where annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nanotate.model.Annotation" >
    update annotations
    set annotator_schema_version = #{annotator_schema_version,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP},
      uri = #{uri,jdbcType=VARCHAR},
      user = #{user,jdbcType=VARCHAR},
      consumer = #{consumer,jdbcType=VARCHAR}
    where annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </update>
</mapper>