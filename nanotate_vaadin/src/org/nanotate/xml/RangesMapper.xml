<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.nanotate.model.RangesMapper" >
  <resultMap id="BaseResultMap" type="org.nanotate.model.Ranges" >
    <id column="range_id" property="range_id" jdbcType="INTEGER" />
    <id column="annotation_id" property="annotation_id" jdbcType="VARCHAR" />
    <result column="start" property="start" jdbcType="VARCHAR" />
    <result column="end" property="end" jdbcType="VARCHAR" />
    <result column="startOffset" property="startOffset" jdbcType="INTEGER" />
    <result column="endOffset" property="endOffset" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    range_id, annotation_id, start, end, startOffset, endOffset
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.nanotate.model.RangesExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ranges
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="org.nanotate.model.RangesKey" >
    select 
    <include refid="Base_Column_List" />
    from ranges
    where range_id = #{range_id,jdbcType=INTEGER}
      and annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="org.nanotate.model.RangesKey" >
    delete from ranges
    where range_id = #{range_id,jdbcType=INTEGER}
      and annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="org.nanotate.model.RangesExample" >
    delete from ranges
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.nanotate.model.Ranges" >
    insert into ranges (range_id, annotation_id, start, 
      end, startOffset, endOffset
      )
    values (#{range_id,jdbcType=INTEGER}, #{annotation_id,jdbcType=VARCHAR}, #{start,jdbcType=VARCHAR}, 
      #{end,jdbcType=VARCHAR}, #{startOffset,jdbcType=INTEGER}, #{endOffset,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.nanotate.model.Ranges" >
    insert into ranges
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="range_id != null" >
        range_id,
      </if>
      <if test="annotation_id != null" >
        annotation_id,
      </if>
      <if test="start != null" >
        start,
      </if>
      <if test="end != null" >
        end,
      </if>
      <if test="startOffset != null" >
        startOffset,
      </if>
      <if test="endOffset != null" >
        endOffset,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="range_id != null" >
        #{range_id,jdbcType=INTEGER},
      </if>
      <if test="annotation_id != null" >
        #{annotation_id,jdbcType=VARCHAR},
      </if>
      <if test="start != null" >
        #{start,jdbcType=VARCHAR},
      </if>
      <if test="end != null" >
        #{end,jdbcType=VARCHAR},
      </if>
      <if test="startOffset != null" >
        #{startOffset,jdbcType=INTEGER},
      </if>
      <if test="endOffset != null" >
        #{endOffset,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.nanotate.model.RangesExample" resultType="java.lang.Integer" >
    select count(*) from ranges
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ranges
    <set >
      <if test="record.range_id != null" >
        range_id = #{record.range_id,jdbcType=INTEGER},
      </if>
      <if test="record.annotation_id != null" >
        annotation_id = #{record.annotation_id,jdbcType=VARCHAR},
      </if>
      <if test="record.start != null" >
        start = #{record.start,jdbcType=VARCHAR},
      </if>
      <if test="record.end != null" >
        end = #{record.end,jdbcType=VARCHAR},
      </if>
      <if test="record.startOffset != null" >
        startOffset = #{record.startOffset,jdbcType=INTEGER},
      </if>
      <if test="record.endOffset != null" >
        endOffset = #{record.endOffset,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ranges
    set range_id = #{record.range_id,jdbcType=INTEGER},
      annotation_id = #{record.annotation_id,jdbcType=VARCHAR},
      start = #{record.start,jdbcType=VARCHAR},
      end = #{record.end,jdbcType=VARCHAR},
      startOffset = #{record.startOffset,jdbcType=INTEGER},
      endOffset = #{record.endOffset,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.nanotate.model.Ranges" >
    update ranges
    <set >
      <if test="start != null" >
        start = #{start,jdbcType=VARCHAR},
      </if>
      <if test="end != null" >
        end = #{end,jdbcType=VARCHAR},
      </if>
      <if test="startOffset != null" >
        startOffset = #{startOffset,jdbcType=INTEGER},
      </if>
      <if test="endOffset != null" >
        endOffset = #{endOffset,jdbcType=INTEGER},
      </if>
    </set>
    where range_id = #{range_id,jdbcType=INTEGER}
      and annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.nanotate.model.Ranges" >
    update ranges
    set start = #{start,jdbcType=VARCHAR},
      end = #{end,jdbcType=VARCHAR},
      startOffset = #{startOffset,jdbcType=INTEGER},
      endOffset = #{endOffset,jdbcType=INTEGER}
    where range_id = #{range_id,jdbcType=INTEGER}
      and annotation_id = #{annotation_id,jdbcType=VARCHAR}
  </update>
</mapper>