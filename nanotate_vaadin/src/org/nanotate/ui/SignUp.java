package org.nanotate.ui;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.session.SqlSession;
import org.jasypt.salt.RandomSaltGenerator;
import org.jasypt.util.password.BasicPasswordEncryptor;
import org.nanotate.model.User;
import org.nanotate.model.UserMapper;
import org.nanotate.util.MyBatis;

import twitter4j.Twitter;
import twitter4j.TwitterException;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.validator.AbstractValidator;
import com.vaadin.data.validator.EmailValidator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import facebook4j.Facebook;
import facebook4j.FacebookException;
import facebook4j.PictureSize;

public class SignUp extends CustomComponent implements View, 
Button.ClickListener {
	
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Panel panel_1;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private Button button_1;

	@AutoGenerated
	private PasswordField passwordconfirm_text;

	@AutoGenerated
	private PasswordField password_text;

	@AutoGenerated
	private TextField email_text;

	@AutoGenerated
	private TextField lastname_text;

	@AutoGenerated
	private TextField firstname_text;

	@AutoGenerated
	private TextField username_text;

	@AutoGenerated
	private Embedded embedded_1;

	@AutoGenerated
	private Label label_1;
	
	private FormLayout form;
	
	private Twitter twitter;
	private Facebook facebook;

	public static final String NAME = "signup";

	/**
	 * 
	 */
	private static final long serialVersionUID = -7525908237347022853L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public SignUp() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@Override
	public void enter(ViewChangeEvent event) {
		
		twitter = (Twitter) getSession().getAttribute("twitter");
		facebook = (Facebook) getSession().getAttribute("facebook");
		
		if(twitter!=null)
		{
			 try {
				 
				twitter4j.User user = (twitter4j.User) twitter.showUser(twitter.getId());
				embedded_1.setSource(new ExternalResource(user.getBiggerProfileImageURL()));
				username_text.setValue(user.getScreenName());
				firstname_text.setValue(user.getName());
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (TwitterException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if(facebook!=null){
			try {
				facebook4j.User user = (facebook4j.User) facebook.getUser(facebook.getId());
				embedded_1.setSource(new ExternalResource(facebook.getPictureURL(facebook.getId(), PictureSize.large).toString()));
				
				if(StringUtils.isNotEmpty(user.getUsername()))
					username_text.setValue(user.getUsername());
				
				firstname_text.setValue(user.getName().substring(0, user.getName().indexOf(" ")));
				lastname_text.setValue(user.getLastName());
				
				if(StringUtils.isNotEmpty(user.getEmail()))
				email_text.setValue(user.getEmail());
					
				
				
				
				
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (FacebookException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
			
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		mainLayout.setComponentAlignment(panel_1, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setStyleName("login-panel");
		panel_1.setImmediate(false);
		panel_1.setWidth("400px");
		panel_1.setHeight("500px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);
		
		return panel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		
		// label_1
		label_1 = new Label();
		label_1.setStyleName("title-label");
		label_1.setImmediate(false);
		label_1.setWidth("100.0%");
		label_1.setHeight("-1px");
		label_1.setValue("Sign up!");
		verticalLayout_2.addComponent(label_1);
		verticalLayout_2.setComponentAlignment(label_1, new Alignment(20));
		
		// embedded_1
		embedded_1 = new Embedded();
		embedded_1.setStyleName("large-profile-image");
		embedded_1.setImmediate(false);
		embedded_1.setWidth("-1px");
		embedded_1.setHeight("-1px");
		embedded_1.setSource(new ThemeResource(
				"img/component/embedded_icon.png"));
		embedded_1.setType(1);
		embedded_1.setMimeType("image/png");
		verticalLayout_2.addComponent(embedded_1);
		verticalLayout_2.setComponentAlignment(embedded_1, new Alignment(20));
		
		// username_text
		username_text = new TextField();
		username_text.setCaption("Username");
		username_text.setImmediate(false);
		username_text.setWidth("200px");
		username_text.setHeight("-1px");
		username_text.setRequired(true);
		verticalLayout_2.addComponent(username_text);
		verticalLayout_2
				.setComponentAlignment(username_text, new Alignment(20));
		
		// firstname_text
		firstname_text = new TextField();
		firstname_text.setCaption("First name");
		firstname_text.setImmediate(false);
		firstname_text.setWidth("200px");
		firstname_text.setHeight("-1px");
		firstname_text.setRequired(true);
		verticalLayout_2.addComponent(firstname_text);
		verticalLayout_2.setComponentAlignment(firstname_text,
				new Alignment(20));
		
		// lastname_text
		lastname_text = new TextField();
		lastname_text.setCaption("Last name");
		lastname_text.setImmediate(false);
		lastname_text.setWidth("200px");
		lastname_text.setHeight("-1px");
		verticalLayout_2.addComponent(lastname_text);
		verticalLayout_2
				.setComponentAlignment(lastname_text, new Alignment(20));
		
		// email_text
		email_text = new TextField();
		email_text.setCaption("Email");
		email_text.setImmediate(false);
		email_text.setWidth("200px");
		email_text.setHeight("-1px");
		email_text.setRequired(true);
		email_text.addValidator(new EmailValidator("Must be a valid email address"));
		email_text.setInvalidAllowed(false);
		verticalLayout_2.addComponent(email_text);
		verticalLayout_2.setComponentAlignment(email_text, new Alignment(20));
		
		// password_text
		password_text = new PasswordField();
		password_text.setCaption("Password");
		password_text.setImmediate(false);
		password_text.setWidth("200px");
		password_text.setHeight("-1px");
		password_text.setRequired(true);
		password_text.addValidator(new PasswordValidator(""));
		verticalLayout_2.addComponent(password_text);
		verticalLayout_2
				.setComponentAlignment(password_text, new Alignment(20));
		
		// passwordconfirm_text
		passwordconfirm_text = new PasswordField();
		passwordconfirm_text.setCaption("Confirm password");
		passwordconfirm_text.setImmediate(false);
		passwordconfirm_text.setWidth("200px");
		passwordconfirm_text.setHeight("-1px");
		passwordconfirm_text.setRequired(true);
		verticalLayout_2.addComponent(passwordconfirm_text);
		verticalLayout_2.setComponentAlignment(passwordconfirm_text,
				new Alignment(20));
		
		// button_1
		button_1 = new Button("Signup", this);
		button_1.setImmediate(true);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		
		
		
		verticalLayout_2.addComponent(button_1);
		verticalLayout_2.setComponentAlignment(button_1, new Alignment(20));
		
		return verticalLayout_2;
	}
	
	private static final class PasswordValidator extends
	AbstractValidator<String> {

		/**
		 * 
		 */
		private static final long serialVersionUID = -3162243230267919326L;
		

		public PasswordValidator(String confirmPassValue) {
			super("The password provided is not valid");
		}
		
	

		@Override
		protected boolean isValidValue(String value) {
			//
			// Password must be at least 8 characters long and contain at least
			// one number
			//
			if (value != null
					&& (value.length() < 8 || !value.matches(".*\\d.*"))) {
				return false;
			}
			return true;
		}

		@Override
		public Class<String> getType() {
			return String.class;
		}
	}

	@Override
	public void buttonClick(ClickEvent event) {
		if (!password_text.isValid()||!email_text.isValid()) {
            return;
        }
		else if(!StringUtils.equals(password_text.getValue(), passwordconfirm_text.getValue()))
		{
			passwordconfirm_text.setValue("");
			password_text.setValue("");
			password_text.focus();
			Notification.show("Password and Confirm password fields must be the same");
		}
		
		SqlSession sqlSession;
		try {
			sqlSession = MyBatis.getSession();
			UserMapper um=sqlSession.getMapper(org.nanotate.model.UserMapper.class);
			User record = new User();
			record.setUsername(username_text.getValue());
			
			BasicPasswordEncryptor passwordEncryptor = new BasicPasswordEncryptor();
			String salt = IOUtils.toString(new RandomSaltGenerator().generateSalt(32), "UTF-8");
			String encryptedPassword = passwordEncryptor.encryptPassword(password_text.getValue()+salt);
			
			record.setPassword(encryptedPassword);
			record.setSalt(salt);
			record.setFirstname(firstname_text.getValue());
			record.setLastname(lastname_text.getValue());
			record.setEmail(email_text.getValue());
			
		
			
			if(twitter!=null){
				record.setTwitter_id(String.valueOf(twitter.getId()));
				record.setTwitter_token(twitter.getOAuthAccessToken().getToken());
				record.setTwitter_token_secret(twitter.getOAuthAccessToken().getTokenSecret());
			}
			
			if(facebook!=null){
				
				record.setFacebook_id(facebook.getId());
				record.setFacebook_token(facebook.getOAuthAccessToken().getToken());
				record.setFacebook_token_expires(facebook.getOAuthAccessToken().getExpires());
				
			}
			
			um.insert(record);
			sqlSession.commit();
			sqlSession.close();
			
			getSession().setAttribute("user", record.getUsername());
     	   getUI().getNavigator().navigateTo(Main.NAME);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Notification.show("There was an error trying to sign up", Type.ERROR_MESSAGE);
		}
		
			
		
	}

}
