package org.nanotate.ui;

import org.apache.commons.lang3.StringUtils;
import org.nanotate.Nanotate_Properties;
import org.nanotate.ui.components.TwitterButton;
import org.nanotate.util.UserUtils;
import org.vaadin.addon.oauthpopup.OAuthListener;
import org.vaadin.addon.oauthpopup.buttons.FacebookButton;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.validator.AbstractValidator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import facebook4j.Facebook;
import facebook4j.FacebookException;
import facebook4j.FacebookFactory;
import facebook4j.PictureSize;

public class Login extends CustomComponent implements View,
Button.ClickListener {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Panel panel_1;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	@AutoGenerated
	private Button button_1;

	@AutoGenerated
	private PasswordField passwordField_1;

	@AutoGenerated
	private TextField textField_1;

	private FacebookButton facebookButton_1;

	private TwitterButton twitterButton_1;

	/**
	 * 
	 */
	private static final long serialVersionUID = 8418857500787112388L;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static final String NAME = "";
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public Login() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		String username = String.valueOf(getSession().getAttribute("user"));
		
	if(!StringUtils.equals(username, "null"))
       	  getUI().getNavigator().navigateTo(Main.NAME);
		
		textField_1.focus();

	}

	@Override
	public void buttonClick(ClickEvent event) {
		//
        // Validate the fields using the navigator. By using validors for the
        // fields we reduce the amount of queries we have to use to the database
        // for wrongly entered passwords
        //
		
        if (!textField_1.isValid() || !passwordField_1.isValid()) {
            return;
        }

        String username = textField_1.getValue();
        String password = this.passwordField_1.getValue();
        
        

        //
        // Validate username and password with database here. For examples sake
        // I use a dummy username and password.
        //
        boolean isValid = UserUtils.validateUser(username, password);

        if (isValid) {

            // Store the current user in the service session
            getSession().setAttribute("user", username);
            
            Facebook facebook = UserUtils.getFacebookUser(username);
            Twitter twitter = UserUtils.getTwitterUser(username);

            getSession().setAttribute("twitter", twitter);
            getSession().setAttribute("facebook", facebook);
            
            if(facebook!=null)
            {
            	try {
					getSession().setAttribute("imgurl", facebook.getPictureURL(facebook.getId(), PictureSize.large).toString());
				} catch (IllegalStateException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (FacebookException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
            else if(twitter!=null){
            	try {
            		twitter4j.User user = (twitter4j.User) twitter.showUser(twitter.getId());
					getSession().setAttribute("imgurl", user.getBiggerProfileImageURL());
				} catch (IllegalStateException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (TwitterException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
				

            // Navigate to main view
            getUI().getNavigator().navigateTo(Main.NAME);//

        } else {

            // Wrong password clear the password field and refocuses it
        	passwordField_1.setValue(null);
        	passwordField_1.focus();

        }
    }

	

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1);
		mainLayout.setComponentAlignment(panel_1, new Alignment(48));

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setStyleName("login-panel");
		panel_1.setImmediate(false);
		panel_1.setWidth("450px");
		panel_1.setHeight("300px");



		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		panel_1.setContent(verticalLayout_2);

		return panel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(new MarginInfo(true, true, true, false));
		verticalLayout_2.setCaption("Log in to Nannotate:");

		// textField_1
		textField_1 = new TextField();
		textField_1.setCaption("User");
		textField_1.setImmediate(false);
		textField_1.setWidth("300px");
		textField_1.setHeight("24px");
		textField_1.setInvalidAllowed(false);
		textField_1.setRequired(true);
		verticalLayout_2.addComponent(textField_1);
		verticalLayout_2.setComponentAlignment(textField_1, new Alignment(48));

		// passwordField_1
		passwordField_1 = new PasswordField();
		passwordField_1.setCaption("Password");
		passwordField_1.setImmediate(false);
		passwordField_1.setWidth("300px");
		passwordField_1.setHeight("-1px");
		passwordField_1.setRequired(true);
		passwordField_1.addValidator(new PasswordValidator());
		passwordField_1.setRequired(true);
	    passwordField_1.setValue("");
	    passwordField_1.setNullRepresentation("");
		verticalLayout_2.addComponent(passwordField_1);
		
		verticalLayout_2.setComponentAlignment(passwordField_1, new Alignment(
				20));

		// button_1
		button_1 = new Button("Login", this);
		button_1.setImmediate(true);
		button_1.setWidth("100px");
		button_1.setHeight("-1px");
		verticalLayout_2.addComponent(button_1);
		verticalLayout_2.setComponentAlignment(button_1, new Alignment(20));

		// horizontalLayout_1
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(true);
		horizontalLayout_1.setSpacing(true);
		horizontalLayout_1.setCaption("Log in/ Sign up with:");
		verticalLayout_2.addComponent(horizontalLayout_1);
		
		
		// facebookButton_1
		facebookButton_1 = new FacebookButton(Nanotate_Properties.getInstance().getProperty("facebook.app.id"),Nanotate_Properties.getInstance().getProperty("facebook.app.secret"));
		facebookButton_1.setScope("email");
		facebookButton_1.setScope("publish_stream");
		facebookButton_1.setScope("public_profile");
		facebookButton_1.setScope("user_friends");
		facebookButton_1.setScope("publish_actions");
		facebookButton_1.setImmediate(false);
		facebookButton_1.setWidth("-1px");
		facebookButton_1.setHeight("-1px");

		
		facebookButton_1.addOAuthListener(new OAuthListener() {
			  @Override
			  public void authSuccessful(String accessToken, String accessTokenSecret) {
					facebook4j.conf.ConfigurationBuilder cb = new facebook4j.conf.ConfigurationBuilder();
		        	cb.setDebugEnabled(true)
		        	  .setOAuthAppId(Nanotate_Properties.getInstance().getProperty("facebook.app.id"))
		        	  .setOAuthAppSecret(Nanotate_Properties.getInstance().getProperty("facebook.app.secret"))
		        	  .setOAuthAccessToken(accessToken);
		        	
//		        	.setOAuthAppId("1427521897511957")
//		    	  .setOAuthAppSecret("9a447eb931f93131af68176c006a1a39")
//		    	  .setOAuthPermissions("public_profile,user_friends,email,publish_stream,publish_actions");
		        	Facebook facebook = new FacebookFactory(cb.build()).getInstance();
//		        	facebook.setOAuthAccessToken(new facebook4j.auth.AccessToken(accessToken, Long.valueOf(accessTokenSecret)));
		        	getSession().setAttribute("facebook", facebook);
		        	
		        	try {
						getSession().setAttribute("imgurl", facebook.getPictureURL(facebook.getId(), PictureSize.large).toString());
					} catch (IllegalStateException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (FacebookException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
		        	
		        	String username = UserUtils.existsFacebookUser(facebook);
			           
			           if (StringUtils.isNotEmpty(username)){
			        	   getSession().setAttribute("user", username);
			        	   getSession().setAttribute("twitter",UserUtils.getTwitterUser(username));
			        	   getUI().getNavigator().navigateTo(Main.NAME);
			           }   
			           else
			        	   getUI().getNavigator().navigateTo(SignUp.NAME);
			  }

			@Override
			public void authDenied(String reason) {
				// TODO Auto-generated method stub
				
			}});
		
		facebookButton_1.setPopupWindowFeatures("resizable,width=1200,height=600");
		horizontalLayout_1.addComponent(facebookButton_1);

// twitterButton_1
		twitterButton_1 = new TwitterButton(Nanotate_Properties.getInstance().getProperty("twitter.app.id"),Nanotate_Properties.getInstance().getProperty("twitter.app.secret"));
		twitterButton_1.setImmediate(false);
		twitterButton_1.setWidth("-1px");
		twitterButton_1.setHeight("-1px");
		
		
		twitterButton_1.addOAuthListener(new OAuthListener() {
			  @Override
			  public void authSuccessful(String accessToken, String accessTokenSecret) {
				  
				
				   	twitter4j.conf.ConfigurationBuilder cb = new 	twitter4j.conf.ConfigurationBuilder();
		            cb.setDebugEnabled(true)
		        .setOAuthConsumerKey(Nanotate_Properties.getInstance().getProperty("twitter.app.id"))
		        .setOAuthConsumerSecret(Nanotate_Properties.getInstance().getProperty("twitter.app.secret"))
		        .setOAuthAccessToken(accessToken)
		        .setOAuthAccessTokenSecret(accessTokenSecret);
		            
		            TwitterFactory tf = new TwitterFactory(cb.build());
		           Twitter twitter = tf.getInstance();
		         
		           getSession().setAttribute("twitter", twitter);
		           
		           String username = UserUtils.existsTwitterUser(twitter);
		           
		           twitter4j.User user;
				try {
					user = (twitter4j.User) twitter.showUser(twitter.getId());
					getSession().setAttribute("imgurl", user.getBiggerProfileImageURL());
				} catch (IllegalStateException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (TwitterException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		           
		           
		           
		           
		           if (StringUtils.isNotEmpty(username)){
		        	   getSession().setAttribute("user", username);
		        	   getSession().setAttribute("facebook",UserUtils.getFacebookUser(username));
		        	   getUI().getNavigator().navigateTo(Main.NAME);
		           }   
		           else
		        	   getUI().getNavigator().navigateTo(SignUp.NAME);
			  }

			  @Override
			  public void authDenied(String reason) {
			    Notification.show("Authorization denied");
			  }
			});
		
		twitterButton_1.setPopupWindowFeatures("resizable,width=400,height=600");
horizontalLayout_1.addComponent(twitterButton_1);
		
		
		verticalLayout_2.setComponentAlignment(horizontalLayout_1,
				new Alignment(48));

		return verticalLayout_2;
	}

	private static final class PasswordValidator extends
	AbstractValidator<String> {

		/**
		 * 
		 */
		private static final long serialVersionUID = -3162243230267919326L;

		public PasswordValidator() {
			super("The password provided is not valid");
		}

		@Override
		protected boolean isValidValue(String value) {
			//
			// Password must be at least 8 characters long and contain at least
			// one number
			//
			if (value != null
					&& (value.length() < 8 || !value.matches(".*\\d.*"))) {
				return false;
			}
			return true;
		}

		@Override
		public Class<String> getType() {
			return String.class;
		}
	}



}
